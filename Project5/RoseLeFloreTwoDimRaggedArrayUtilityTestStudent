import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.PrintWriter;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class RoseLeFloreTwoDimRaggedArrayUtilityTestStudent {
	private double[][] dataSet1 = {{1,2,3},{4,5},{6,7,8,9}};
 
	@BeforeEach
	void setUp() throws Exception {
	}

	@AfterEach
	void tearDown() throws Exception {
	}
	
	@Test
	public void testWriteToFile() {
		double[][] array = null;
		File outputFile = new File("Test1.txt");
		try {
			
			TwoDimRaggedArrayUtility.writeToFile(dataSet1, outputFile);
		}catch(Exception e) {
			fail("This shouldn't have caused exception");
		}
		try {
			array = TwoDimRaggedArrayUtility.readFile(outputFile);
			assertEquals(1, array[0][0],.001);
			assertEquals(2, array[0][1],.001);
			assertEquals(3, array[0][2],.001);
			assertEquals(4, array[1][0],.001);
			assertEquals(5, array[1][1],.001);
			assertEquals(6, array[2][0],.001);
			assertEquals(7, array[2][1],.001);
			assertEquals(8, array[2][2],.001);
			assertEquals(9, array[2][3],.001);
		}catch(Exception e) {
			fail("This shouldn't have caused exception");
		
		}
			
	}
	
	public void testReadFile() {
		double[][]array = null;
		try {
			File inputFile = new File("Test1.txt");
			PrintWriter inFile = new PrintWriter(inputFile);
			inFile.print("1 2 3 4\n" + "5 6 7\n" + "8 9");
			inFile.close();
			array = TwoDimRaggedArrayUtility.readFile(inputFile);
			assertEquals(1, array[0][0],.001);
			assertEquals(2, array[0][1],.001);
			assertEquals(3, array[0][2],.001);
			assertEquals(4, array[0][3],.001);
			assertEquals(5, array[1][0],.001);
			assertEquals(6, array[1][1],.001);
			assertEquals(7, array[1][2],.001);
			assertEquals(8, array[2][0],.001);
			assertEquals(9, array[2][1],.001);			
		}catch(Exception e) {
			fail("This shouldn't have an exception");
		}
	}

	
	@Test
	public void testGetRowTotal() {
		assertEquals(9.0,TwoDimRaggedArrayUtility.getRowTotal(dataSet1,1),.001);
	}
	
	@Test
	public void getHighestInColumnIndex() {
		assertEquals(2,TwoDimRaggedArrayUtility.getHighestInColumnIndex(dataSet1,0),.001);
	}
	
	@Test
	public void getLowestInColumnIndex() {
		assertEquals(0,TwoDimRaggedArrayUtility.getLowestInColumnIndex(dataSet1,0),.001);
	}
	
	@Test
	public void getTotal() {
		assertEquals(45,TwoDimRaggedArrayUtility.getTotal(dataSet1),.001);
	}
	
	@Test
	public void getAverage() {
		assertEquals(5,TwoDimRaggedArrayUtility.getAverage(dataSet1),.001);
	}
	
	@Test
	public void getRowTotal() {
		assertEquals(6,TwoDimRaggedArrayUtility.getRowTotal(dataSet1,0),.001);
	}
	
	@Test
	public void getColumnTotal() {
		assertEquals(11,TwoDimRaggedArrayUtility.getColumnTotal(dataSet1,0),.001);
	}
	
	@Test
	public void getHighestInRow() {
		assertEquals(3,TwoDimRaggedArrayUtility.getHighestInRow(dataSet1,0),.001);
	}
	
	@Test
	public void getHighestInRowIndex() {
		assertEquals(2,TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet1,0),.001);
	}
	
	@Test
	public void getLowestInRow() {
		assertEquals(1,TwoDimRaggedArrayUtility.getLowestInRow(dataSet1,0),.001);
	}
	
	@Test
	public void getHighestInColumn() {
		assertEquals(6,TwoDimRaggedArrayUtility.getHighestInColumn(dataSet1,0),.001);
	}
	
	@Test
	public void getLowestInColumn() {
		assertEquals(1,TwoDimRaggedArrayUtility.getLowestInColumn(dataSet1,0),.001);
	}
	
	@Test
	public void getHighestInArray() {
		assertEquals(9,TwoDimRaggedArrayUtility.getHighestInArray(dataSet1),.001);
	}
	
	public void getLowestInArray() {
		assertEquals(1,TwoDimRaggedArrayUtility.getLowestInArray(dataSet1),.001);
	}

}
